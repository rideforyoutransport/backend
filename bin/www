
 /**
 * Module dependencies.
 */


 var app = require('../app');
 var debug = require('debug')('ride4utransport:server');
 var http = require('http');
 const EventSource = require('eventsource');
 global.EventSource = EventSource;
 

 /**
  * Get port from environment and store in Express.
  */

  
 var server_port = normalizePort(process.env.SERVER_PORT || '3003');
 app.set('port', server_port);
const {pb}  = require('../pocketbase/pocketbase.js');



 
 /**
  * Create HTTP server.
  */
 
 var server = http.createServer(app);
 /**
  * Listen on provided port, on all network interfaces.
  */

 // events code 
const io = require('socket.io')(server, {
  cors: {
    origin: '*',
  }
});

 io.on("connection", async (socket) => {
  console.log("New client connected");

  await pb.collection('chats').subscribe('*', function(e){
    console.log("this is inside ",e.record.messages,e.action);
    socket.emit("chatsAPI", e.record.messages);
  });

  io.on("disconnect", () => {
    console.log("Client disconnected");
    pb.collection('chats').unsubscribe(); 
  });

});


 server.listen(server_port);
 server.on('error', onError);
 server.on('listening', onListening);
 
 /**
  * Normalize a port into a number, string, or false.
  */
 
 function normalizePort(val) {
   var port = parseInt(val, 10);
 
   if (isNaN(port)) {
     // named pipe
     return val;
   }
 
   if (port >= 0) {
     // port number
     return port;
   }
 
   return false;
 }
 
 /**
  * Event listener for HTTP server "error" event.
  */
 
 function onError(error) {
  var port = parseInt(process.env.SERVER_PORT || 10);
   if (error.syscall !== 'listen') {
     throw error;
   }
 
   var bind = typeof port === 'string'
     ? 'Pipe ' + port
     : 'Port ' + port;
 
   // handle specific listen errors with friendly messages
   switch (error.code) {
     case 'EACCES':
       console.error(bind + ' requires elevated privileges');
       process.exit(1);
       break;
     case 'EADDRINUSE':
       console.error(bind + ' is already in use');
       process.exit(1);
       break;
     default:
       throw error;
   }
 }
 

 /**
  * Event listener for HTTP server "listening" event.
  */
 
 function onListening() {
   var addr = server.address();
   var bind = typeof addr === 'string'
     ? 'pipe ' + addr
     : 'port ' + addr.port;
 
   debug('Listening on ' + bind);
   console.log('Listening on ' + bind);
 }





